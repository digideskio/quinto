Q = require '../quinto'
Player = Q.Player
Game = Q.Game
GameState = Q.GameState

describe 'Player', ->
  it 'should have a working constructor', ->
    p = new Player 'bar@baz.com', 'blah'
    expect(p.email).toEqual 'bar@baz.com'
    expect(p.token).toEqual 'blah'

describe 'Game', ->
  beforeEach ->
    @g = new Game [new Player('bar@baz.com', 'blah'), new Player('bar2@baz.com', 'blah2')]
    @s = @g.state()

  it 'should require at least 2 players', ->
    expect(-> new Game []).toThrow()
    expect(-> new Game [new Player 'bar@baz.com', 'blah']).toThrow()

  it 'should have an initial state', ->
    expect(@s.tiles.length).toEqual(80)
    expect(@s.racks.length).toEqual(2)
    expect(r.length).toEqual(5) for r in @s.racks

  it 'should allow passing', ->
    expect(@s.toMove).toEqual(0)
    @g.pass()
    s = @g.state()
    expect(s.toMove).toEqual(1)
    expect(s.scores).toEqual([0, 0])

  it 'should allow moving', ->
    expect(@s.toMove).toEqual(0)
    @s.racks[0][1] = 5
    @g.move("5i8")
    s = @g.state()
    expect(s.toMove).toEqual(1)
    expect(s.scores).toEqual([5, 0])

describe 'GameState', ->
  beforeEach ->
    @s = (new Game [new Player('bar@baz.com', 'blah'), new Player('bar2@baz.com', 'blah2')]).state()
    @s.racks = [[5, 6, 4, 3, 7], [5, 8, 2, 9, 1]]

  it 'should have a reasonable initial state', ->
    expect(@s.tiles.length).toEqual(80)
    expect(@s.racks.length).toEqual(2)
    expect(r.length).toEqual(5) for r in @s.racks
    expect(@s.game.players[0].email).toEqual('bar@baz.com')
    expect(@s.board).toEqual({})
    expect(@s.scores).toEqual([0, 0])
    expect(@s.lastMove).toEqual(null)
    expect(@s.lastRuns).toEqual(null)
    expect(@s.passCount).toEqual(0)
    expect(@s.moveCount).toEqual(0)
    expect(@s.gameOver).toEqual(false)

  it 'should have a reasonable state after passing', ->
    s = @s.pass()
    expect(s.tiles.length).toEqual(80)
    expect(s.racks.length).toEqual(2)
    expect(r.length).toEqual(5) for r in s.racks
    expect(s.game.players[0].email).toEqual('bar@baz.com')
    expect(s.board).toEqual({})
    expect(s.scores).toEqual([0, 0])
    expect(s.lastMove).toEqual(null)
    expect(s.lastRuns).toEqual(null)
    expect(s.passCount).toEqual(1)
    expect(s.moveCount).toEqual(1)
    expect(s.gameOver).toEqual(false)

  it 'should have a reasonable state after moving', ->
    s = @s.move('5i8')
    expect(s.tiles.length).toEqual(79)
    expect(s.racks.length).toEqual(2)
    expect(r.length).toEqual(5) for r in s.racks
    expect(s.game.players[0].email).toEqual('bar@baz.com')
    expect(s.board).toEqual({i8: 5})
    expect(s.scores).toEqual([5, 0])
    expect(s.lastMove).toEqual('5i8')
    expect(s.lastRuns).toEqual({i8: 5})
    expect(s.passCount).toEqual(0)
    expect(s.moveCount).toEqual(1)
    expect(s.gameOver).toEqual(false)

  it 'should be over if all players pass', ->
    expect(@s.pass().pass().gameOver).toEqual(true)

  it 'should be over if all tiles are played and a rack is empty', ->
    @s.tiles = []
    s = @s.move('6i8 5i7 4i6 3i5 7i4')
    expect(s.gameOver).toEqual(true)
    expect(s.scores).toEqual([25, -25])

  it 'should report winners correctly', ->
    expect(p.email for p in @s.pass().pass().winners()).toEqual(['bar@baz.com', 'bar2@baz.com'])
    @s.racks[0] = [5]
    @s.tiles = []
    expect(p.email for p in @s.move('5i8').winners()).toEqual(['bar@baz.com'])

  it 'should report if the board is empty', ->
    expect(@s.empty()).toEqual(true)
    expect(@s.pass().empty()).toEqual(true)
    expect(@s.move('5i8').empty()).toEqual(false)

  it 'should throw error if first move not in center', ->
    expect(=> @s.move('5i7')).toThrow()

  it 'should throw error if tile played not adjacent to existing tile', ->
    expect(=> @s.move('5i7 6i9 4i10')).toThrow()
    s = @s.move('5i8 6i9 4i10')
    expect(-> s.move('5i5')).toThrow()

  it 'should throw error if sum of any run does not equal multiple of 5', ->
    expect(=> @s.move('5i8 6i9')).toThrow()
    s = @s.move('5i8 6i9 4i10')
    expect(-> s.move('5j10')).toThrow()

  it 'should throw error if more than 5 tiles in a row', ->
    s = @s.move('5i8 6i9 4i10 7i11 3i12')
    expect(-> s.move('5i13')).toThrow()

  it 'should throw error if tile played not in rack', ->
    expect(=> @s.move('10i8')).toThrow()

  it 'should throw error if tile played outside of board', ->
    expect(=> @s.move('5i20')).toThrow()
    s = @s.move('5i8')
    s.board = {i16: 5}
    expect(-> s.move('5i17')).toThrow()

  it 'should throw error if tiles not in single row or column', ->
    expect(=> @s.move('5i8 6i9 4j9')).toThrow()
    expect(=> @s.move('5i8 6j8 4j9')).toThrow()

  it 'should throw error if tile played over existing tile', ->
    s = @s.move('5i8')
    expect(-> s.move('5i8')).toThrow()

  it 'should calculate runs correctly', ->
    s = @s.move('5i8 6i9 7i10 4i11 3i12')
    expect(s.scores).toEqual([25, 0])
    expect(s.move('5j8 9j9 8j10 2j7 1j6').scores).toEqual([25, 65])

  it 'should handle a few games correctly', ->
    s = @s
    s.tiles = [7, 9, 5, 8, 6, 8, 8, 7, 2, 4, 6, 1, 7, 2, 1, 7, 9, 9, 7, 6, 4, 3, 5, 5, 10, 8, 4, 8, 8, 9, 6, 1, 5, 1, 9, 3, 10, 7, 8, 8, 4, 7, 6, 7, 4, 8, 1, 4, 7, 5, 10, 7, 3, 9, 10, 7, 3, 6, 2, 7, 10, 9, 4, 6, 5, 6, 3, 9, 8, 9, 8, 9, 7, 6, 2, 9, 1, 7, 9, 6]
    s.racks = [[3, 4, 4, 8, 10], [2, 2, 3, 4, 10]]
    s = s.move("3h8 4i8 8j8")
    expect(s.scores).toEqual([15, 0])
    expect(s.gameOver).toEqual(false)
    s = s.move("2k10 3k9 10k8")
    expect(s.scores).toEqual([15, 40])
    expect(s.gameOver).toEqual(false)
    s = s.move("4l6 7l9 9l7 10l8")
    expect(s.scores).toEqual([90, 40])
    expect(s.gameOver).toEqual(false)
    s = s.move("2i10 8h10 8j10")
    expect(s.scores).toEqual([90, 60])
    expect(s.gameOver).toEqual(false)
    s = s.move("5l10")
    expect(s.scores).toEqual([150, 60])
    expect(s.gameOver).toEqual(false)
    s = s.move("4h9 6g9")
    expect(s.scores).toEqual([150, 85])
    expect(s.gameOver).toEqual(false)
    s = s.move("7n9 8m9")
    expect(s.scores).toEqual([175, 85])
    expect(s.gameOver).toEqual(false)
    s = s.move("1m4 1m7 6m6 7m5")
    expect(s.scores).toEqual([175, 120])
    expect(s.gameOver).toEqual(false)
    s = s.move("2e9 4i9 9f9")
    expect(s.scores).toEqual([210, 120])
    expect(s.gameOver).toEqual(false)
    s = s.move("3n5 4n4 6n3 7n2")
    expect(s.scores).toEqual([210, 155])
    expect(s.gameOver).toEqual(false)
    s = s.move("5k6 10k7")
    expect(s.scores).toEqual([275, 155])
    expect(s.gameOver).toEqual(false)
    s = s.move("4a10 7b10 8c10 8d10 8e10")
    expect(s.scores).toEqual([275, 200])
    expect(s.gameOver).toEqual(false)
    s = s.move("2d11 5e11 9f11 9g11")
    expect(s.scores).toEqual([325, 200])
    expect(s.gameOver).toEqual(false)
    s = s.move("5h11")
    expect(s.scores).toEqual([325, 250])
    expect(s.gameOver).toEqual(false)
    s = s.move("7o7 8o8 10o9")
    expect(s.scores).toEqual([385, 250])
    expect(s.gameOver).toEqual(false)
    s = s.move("3n8 9p8")
    expect(s.scores).toEqual([385, 280])
    expect(s.gameOver).toEqual(false)
    s = s.move("7o1 8o2")
    expect(s.scores).toEqual([415, 280])
    expect(s.gameOver).toEqual(false)
    s = s.move("4p6 4p5 8p7")
    expect(s.scores).toEqual([415, 320])
    expect(s.gameOver).toEqual(false)
    s = s.move("1q3 6q6 6q5 7q4")
    expect(s.scores).toEqual([455, 320])
    expect(s.gameOver).toEqual(false)
    s = s.move("1q1 7p1 10n1")
    expect(s.scores).toEqual([455, 375])
    expect(s.gameOver).toEqual(false)
    s = s.move("4j12 7k12 9i12 10h12")
    expect(s.scores).toEqual([515, 375])
    expect(s.gameOver).toEqual(false)
    s = s.move("3l13 5l12 7l14")
    expect(s.scores).toEqual([515, 425])
    expect(s.gameOver).toEqual(false)
    s = s.move("3k13 9m13")
    expect(s.scores).toEqual([540, 425])
    expect(s.gameOver).toEqual(false)
    s = s.move("1o14 5k14 6n14 6m14")
    expect(s.scores).toEqual([540, 480])
    expect(s.gameOver).toEqual(false)
    s = s.move("3q10 7q9 10q8")
    expect(s.scores).toEqual([590, 480])
    expect(s.gameOver).toEqual(false)
    s = s.move("4q15 8p15 9o15 9n15")
    expect(s.scores).toEqual([590, 535])
    expect(s.gameOver).toEqual(false)
    s = s.move("6a12 6a11 9a9")
    expect(s.scores).toEqual([615, 535])
    expect(s.gameOver).toEqual(false)
    s = s.move("1b9 8b8 9b11")
    expect(s.scores).toEqual([615, 585])
    expect(s.gameOver).toEqual(false)
    s = s.move("2c6 6c7 7c8")
    expect(s.scores).toEqual([645, 585])
    expect(s.gameOver).toEqual(false)
    s = s.move("2e7 7d7")
    expect(s.scores).toEqual([636, 600])
    expect(s.gameOver).toEqual(true)

    s = @s
    s.tiles = [4, 6, 8, 7, 2, 4, 7, 5, 2, 8, 6, 7, 4, 10, 9, 9, 3, 9, 8, 1, 10, 7, 4, 6, 7, 1, 3, 7, 3, 10, 1, 3, 8, 7, 6, 5, 4, 5, 2, 8, 8, 3, 8, 9, 6, 6, 5, 8, 9, 4, 8, 2, 9, 1, 6, 7, 9, 5, 7, 6, 6, 10, 7, 8, 7, 4, 8, 3, 7, 10, 9, 9, 6, 7, 2, 2, 9, 1, 1, 4]
    s.racks = [[4, 4, 7, 9, 10], [3, 5, 8, 9, 10]]
    s = s.move("4h8 7i8 9j8")
    expect(s.scores).toEqual([20, 0])
    expect(s.gameOver).toEqual(false)
    s = s.move("3k10 8k9 9k11 10k8")
    expect(s.scores).toEqual([20, 60])
    expect(s.gameOver).toEqual(false)
    s = s.move("4g10 6g9 10g8")
    expect(s.scores).toEqual([80, 60])
    expect(s.gameOver).toEqual(false)
    s = s.move("4h10 7i10 7j10")
    expect(s.scores).toEqual([80, 85])
    expect(s.gameOver).toEqual(false)
    s = s.move("2n9 4j9 8l9 8m9")
    expect(s.scores).toEqual([130, 85])
    expect(s.gameOver).toEqual(false)
    s = s.move("2h9 7f9")
    expect(s.scores).toEqual([130, 110])
    expect(s.gameOver).toEqual(false)
    s = s.move("9i6 9i7")
    expect(s.scores).toEqual([155, 110])
    expect(s.gameOver).toEqual(false)
    s = s.move("6h7 9h11")
    expect(s.scores).toEqual([155, 150])
    expect(s.gameOver).toEqual(false)
    s = s.move("10g7 10j7")
    expect(s.scores).toEqual([250, 150])
    expect(s.gameOver).toEqual(false)
    s = s.move("5k7")
    expect(s.scores).toEqual([250, 225])
    expect(s.gameOver).toEqual(false)
    s = s.move("3i11 5g11 6e11 7f11")
    expect(s.scores).toEqual([325, 225])
    expect(s.gameOver).toEqual(false)
    s = s.move("1p10 4o10 7m10 8n10")
    expect(s.scores).toEqual([325, 270])
    expect(s.gameOver).toEqual(false)
    s = s.move("3g5 7h5 10i5")
    expect(s.scores).toEqual([380, 270])
    expect(s.gameOver).toEqual(false)
    s = s.move("1e4 4f4 7g4 8h4")
    expect(s.scores).toEqual([380, 315])
    expect(s.gameOver).toEqual(false)
    s = s.move("5i4")
    expect(s.scores).toEqual([445, 315])
    expect(s.gameOver).toEqual(false)
    s = s.move("3e8 5e9 8e12 8e10")
    expect(s.scores).toEqual([445, 365])
    expect(s.gameOver).toEqual(false)
    s = s.move("1f5 4e5")
    expect(s.scores).toEqual([480, 365])
    expect(s.gameOver).toEqual(false)
    s = s.move("2d12 6d15 8d13 9d14")
    expect(s.scores).toEqual([480, 400])
    expect(s.gameOver).toEqual(false)
    s = s.move("3g16 3f16 5d16 6e16 8c16")
    expect(s.scores).toEqual([535, 400])
    expect(s.gameOver).toEqual(false)
    s = s.move("2c15 4e15 8b15")
    expect(s.scores).toEqual([535, 440])
    expect(s.gameOver).toEqual(false)
    s = s.move("7d8 9d7 9d6")
    expect(s.scores).toEqual([570, 440])
    expect(s.gameOver).toEqual(false)
    s = s.move("5e6 6c6 6a6 9b6")
    expect(s.scores).toEqual([570, 485])
    expect(s.gameOver).toEqual(false)
    s = s.move("1a16 6a13 6a12 7a14 10a15")
    expect(s.scores).toEqual([630, 485])
    expect(s.gameOver).toEqual(false)
    s = s.move("7g15 7h15 8i15 8j15")
    expect(s.scores).toEqual([630, 525])
    expect(s.gameOver).toEqual(false)
    s = s.move("7k13 9k14 9k16 10k15")
    expect(s.scores).toEqual([705, 525])
    expect(s.gameOver).toEqual(false)
    s = s.move("2l14 2i14 7j14")
    expect(s.scores).toEqual([705, 570])
    expect(s.gameOver).toEqual(false)
    s = s.move("1n13 3l13 9m13")
    expect(s.scores).toEqual([730, 570])
    expect(s.gameOver).toEqual(false)
    s = s.move("4p11 6o11")
    expect(s.scores).toEqual([725, 595])
    expect(s.gameOver).toEqual(true)

    s = @s
    s.tiles = [9, 7, 2, 9, 3, 7, 8, 3, 4, 10, 6, 8, 9, 4, 5, 4, 6, 10, 2, 3, 8, 8, 6, 4, 1, 10, 1, 7, 5, 8, 6, 6, 2, 10, 3, 1, 5, 10, 9, 10, 5, 9, 4, 4, 4, 9, 2, 3, 8, 7, 4, 7, 6, 1, 4, 9, 8, 8, 4, 6, 3, 7, 10, 7, 1, 7, 6, 9, 2, 7, 7, 9, 9, 3, 8, 9, 6, 8, 1, 7]
    s.racks = [[2, 5, 5, 8, 9], [6, 7, 7, 7, 8]]
    s = s.move("2h8 8i8")
    expect(s.scores).toEqual([10, 0])
    expect(s.gameOver).toEqual(false)
    s = s.move("6g9 7k9 7j9 7i9 8h9")
    expect(s.scores).toEqual([10, 60])
    expect(s.gameOver).toEqual(false)
    s = s.move("5i10 5h10 7e10 9g10 9f10")
    expect(s.scores).toEqual([95, 60])
    expect(s.gameOver).toEqual(false)
    s = s.move("3k8 8j8 9l8")
    expect(s.scores).toEqual([95, 115])
    expect(s.gameOver).toEqual(false)
    s = s.move("3l6 4l4 6l5 8l7")
    expect(s.scores).toEqual([125, 115])
    expect(s.gameOver).toEqual(false)
    s = s.move("5k7 7m7")
    expect(s.scores).toEqual([125, 150])
    expect(s.gameOver).toEqual(false)
    s = s.move("10i7 10j7")
    expect(s.scores).toEqual([220, 150])
    expect(s.gameOver).toEqual(false)
    s = s.move("3c9 8e9 9d9")
    expect(s.scores).toEqual([220, 185])
    expect(s.gameOver).toEqual(false)
    s = s.move("2c8 4a8 6d8 8b8")
    expect(s.scores).toEqual([260, 185])
    expect(s.gameOver).toEqual(false)
    s = s.move("1k11 4j11 10i11")
    expect(s.scores).toEqual([260, 240])
    expect(s.gameOver).toEqual(false)
    s = s.move("5e8 7e7 8e6")
    expect(s.scores).toEqual([320, 240])
    expect(s.gameOver).toEqual(false)
    s = s.move("2m6 4m5 6m4 6m3")
    expect(s.scores).toEqual([320, 290])
    expect(s.gameOver).toEqual(false)
    s = s.move("10h11")
    expect(s.scores).toEqual([370, 290])
    expect(s.gameOver).toEqual(false)
    s = s.move("10j6 10k6")
    expect(s.scores).toEqual([370, 375])
    expect(s.gameOver).toEqual(false)
    s = s.move("5g11")
    expect(s.scores).toEqual([420, 375])
    expect(s.gameOver).toEqual(false)
    s = s.move("5k5")
    expect(s.scores).toEqual([420, 420])
    expect(s.gameOver).toEqual(false)
    s = s.move("1n12 1m12 3l12 4k12 6j12")
    expect(s.scores).toEqual([450, 420])
    expect(s.gameOver).toEqual(false)
    s = s.move("2l13 9n13 9m13")
    expect(s.scores).toEqual([450, 465])
    expect(s.gameOver).toEqual(false)
    s = s.move("2d6 3d7")
    expect(s.scores).toEqual([490, 465])
    expect(s.gameOver).toEqual(false)
    s = s.move("4n3 6n2")
    expect(s.scores).toEqual([490, 485])
    expect(s.gameOver).toEqual(false)
    s = s.move("4o0 7o1 9o2")
    expect(s.scores).toEqual([525, 485])
    expect(s.gameOver).toEqual(false)
    s = s.move("7g12 8g13")
    expect(s.scores).toEqual([525, 520])
    expect(s.gameOver).toEqual(false)
    s = s.move("6d13 8f13 8e13")
    expect(s.scores).toEqual([555, 520])
    expect(s.gameOver).toEqual(false)
    s = s.move("4c12 7e12 9d12")
    expect(s.scores).toEqual([555, 570])
    expect(s.gameOver).toEqual(false)
    s = s.move("4c11 7c14 10c13")
    expect(s.scores).toEqual([620, 570])
    expect(s.gameOver).toEqual(false)
    s = s.move("3d14 7d15")
    expect(s.scores).toEqual([620, 605])
    expect(s.gameOver).toEqual(false)
    s = s.move("1f15 7e15")
    expect(s.scores).toEqual([635, 605])
    expect(s.gameOver).toEqual(false)
    s = s.move("4m0 9n0 9p0 9q0")
    expect(s.scores).toEqual([635, 640])
    expect(s.gameOver).toEqual(false)
    s = s.move("1q3 7q2 8q1")
    expect(s.scores).toEqual([660, 640])
    expect(s.gameOver).toEqual(false)
    s = s.move("1p6 6p5 6p4 8p2 9p3")
    expect(s.scores).toEqual([648, 710])
    expect(s.gameOver).toEqual(true)

